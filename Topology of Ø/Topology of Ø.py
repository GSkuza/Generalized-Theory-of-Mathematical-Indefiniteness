# Topologia Ã˜ w GTMÃ˜ / Topology of Ã˜ in GTMÃ˜

"""
ðŸ“˜ Aksjomaty, definicje i diagramy GTMÃ˜ dla topologii Ã˜:

Wizualizacja wynikÃ³w zawartych w kodzie znajduje siÄ™ tutaj:

![Ï†(t) i Heatmapa E(x)](Ï†_t_E_heatmap_summary.png)

ðŸ”¹ Aksjomat AX8_v2 (Izolacja graniczna Ã˜):
Â¬âˆƒSeq(xâ‚™) âŠ† Domain(GTMÃ˜): lim(xâ‚™) = Ã˜
â€“ Å»aden klasyczny ciÄ…g nie zbiega do Ã˜. Ã˜ nie posiada klasycznej granicy.

ðŸ”¹ Aksjomat AXÃ˜_iso (Translogiczna izolacja):
âˆ€x âˆˆ D_classical: Â¬âˆƒf(x) = Ã˜
â€“ Ã˜ nie moÅ¼e byÄ‡ obrazem Å¼adnej funkcji klasycznej.

ðŸ”¹ Definicja E(x):
Heurystyka epistemiczna E(x) mierzy odlegÅ‚oÅ›Ä‡ poznawczÄ… od Ã˜:
E(x) = 1 âˆ’ exp(âˆ’|x âˆ’ Ã˜|)

ðŸ”¹ Definicja Ï†(t):
Trajektoria poznawcza Ï†(t) odwzorowuje stan bytu:
Ï†(t) âˆˆ {0 (niebyt), 1 (byt), âˆž (nieskoÅ„czonoÅ›Ä‡), Ã˜ (niedefinitywnoÅ›Ä‡)}

ðŸ”¹ Definicja Ï†â€²(t):
Poznawcze przyspieszenie â€“ zmiana trajektorii Ï†(t) wzglÄ™dem t:
Ï†â€²(t) = dÏ†/dt â‰ˆ [Ï†(t+Î”t) âˆ’ Ï†(t)] / Î”t

ðŸ”¹ Definicja Î¨á´·(x):
Klasyfikator czÄ…stek wiedzy na podstawie heurystyki E(x):
Î¨á´· = Ã˜ â‡” E(x) < Î´

ðŸ”¹ Termin: Punkt emergencji Ã˜
Punkt Ï†(t), dla ktÃ³rego E(x) < Î´ i ktÃ³ry pojawia siÄ™ dynamicznie na trajektorii poznania.

ðŸ”¹ Termin: Heatmapa Ã˜
Wizualizacja natÄ™Å¼enia E(x) w czasie Ï†(t), ukazujÄ…ca obszary emergencji i niedefinitywnoÅ›ci.

ðŸ”¹ Termin: OsobliwoÅ›Ä‡ Ã˜
Skrajny przypadek emergencji, gdzie system poznawczy wchodzi w interakcjÄ™ z Ã˜ bez moÅ¼liwoÅ›ci klasycznej klasyfikacji.
"""

from math import exp, sin, pi, isclose
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.widgets import Slider
from matplotlib.animation import FuncAnimation
import unittest
import os

# Ï†(t), E(x), Ï†â€²(t), Î¨á´· â€“ wszystkie funkcje dostÄ™pne w module
# Inne funkcje zostaÅ‚y uprzednio zdefiniowane

def display_all_outputs():
    print("Wizualizacje i analizy GTMÃ˜ uruchomione...")
    visualize_phi_trajectory()
    nonlinear_emergence_mapping()
    visualize_heatmap_Ã˜()
    print("OsobliwoÅ›ci Ã˜ wykryte na trajektorii Ï†(t):", detect_singularities())
    interactive_phi_analysis()
    real_time_analysis()

# Testy zÅ‚oÅ¼one (jak wczeÅ›niej)
class TestComplexTopologyÃ˜(unittest.TestCase):
    def test_phi_continuity_classes(self):
        self.assertEqual(phi(0.24), 0)
        self.assertEqual(phi(0.25), 1)
        self.assertEqual(phi(0.49), 1)
        self.assertEqual(phi(0.5), float('inf'))
        self.assertEqual(phi(0.74), float('inf'))
        self.assertEqual(phi(0.75), 999)

    def test_phi_prime_discontinuity(self):
        self.assertTrue(abs(phi_prime(0.24)) > 10 or is_nan(phi_prime(0.24)))
        self.assertTrue(abs(phi_prime(0.49)) > 10 or is_nan(phi_prime(0.49)))
        self.assertTrue(abs(phi_prime(0.74)) > 10 or is_nan(phi_prime(0.74)))

    def test_emergence_mapping_range(self):
        ts = np.linspace(0, 1, 50)
        values = [E(phi(t) + sin(10 * pi * t) * 0.1, 999) for t in ts]
        for val in values:
            self.assertTrue(0 <= val <= 1)

    def test_detect_singularities_density(self):
        ts = np.linspace(0.75, 1.0, 100)
        singular = detect_singularities(ts, delta=0.1)
        self.assertTrue(len(singular) > 10)

    def test_phi_and_E_sync(self):
        ts = [0.9, 0.95, 1.0]
        for t in ts:
            x = phi(t)
            self.assertLess(E(x), 0.1)

if __name__ == "__main__":
    unittest.main(argv=[''], exit=False)
    display_all_outputs()
